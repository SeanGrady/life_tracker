"""empty message

Revision ID: f9486242a7ec
Revises: 9e68a6add6fb
Create Date: 2020-08-21 14:09:51.815183

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f9486242a7ec'
down_revision = '9e68a6add6fb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cronometer_biometric',
    sa.Column('metric', sa.String(), nullable=False),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('Ammount', sa.Float(), nullable=True),
    sa.Column('app_user_id', sa.Integer(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('day', sa.Date(), nullable=False),
    sa.Column('group', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.id'], ),
    sa.PrimaryKeyConstraint('app_user_id', 'time', 'day', 'group')
    )
    op.create_table('cronometer_daily_summary',
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('energy_kcal', sa.Float(), nullable=True),
    sa.Column('alcohol_g', sa.Float(), nullable=True),
    sa.Column('caffeine_mg', sa.Float(), nullable=True),
    sa.Column('water_g', sa.Float(), nullable=True),
    sa.Column('b1_thiamine_mg', sa.Float(), nullable=True),
    sa.Column('b2_riboflavin_mg', sa.Float(), nullable=True),
    sa.Column('b3_niacin_mg', sa.Float(), nullable=True),
    sa.Column('b5_pantothenic_acid_mg', sa.Float(), nullable=True),
    sa.Column('b6_pyridoxine_mg', sa.Float(), nullable=True),
    sa.Column('b12_cobalamin_μg', sa.Float(), nullable=True),
    sa.Column('folate_μg', sa.Float(), nullable=True),
    sa.Column('vitamin_a_iu', sa.Float(), nullable=True),
    sa.Column('vitamin_c_mg', sa.Float(), nullable=True),
    sa.Column('vitamin_d_iu', sa.Float(), nullable=True),
    sa.Column('vitamin_e_mg', sa.Float(), nullable=True),
    sa.Column('vitamin_k_μg', sa.Float(), nullable=True),
    sa.Column('calcium_mg', sa.Float(), nullable=True),
    sa.Column('copper_mg', sa.Float(), nullable=True),
    sa.Column('iron_mg', sa.Float(), nullable=True),
    sa.Column('magnesium_mg', sa.Float(), nullable=True),
    sa.Column('manganese_mg', sa.Float(), nullable=True),
    sa.Column('phosphorus_mg', sa.Float(), nullable=True),
    sa.Column('potassium_mg', sa.Float(), nullable=True),
    sa.Column('selenium_μg', sa.Float(), nullable=True),
    sa.Column('sodium_mg', sa.Float(), nullable=True),
    sa.Column('zinc_mg', sa.Float(), nullable=True),
    sa.Column('carbs_g', sa.Float(), nullable=True),
    sa.Column('fiber_g', sa.Float(), nullable=True),
    sa.Column('starch_g', sa.Float(), nullable=True),
    sa.Column('sugars_g', sa.Float(), nullable=True),
    sa.Column('net_carbs_g', sa.Float(), nullable=True),
    sa.Column('fat_g', sa.Float(), nullable=True),
    sa.Column('cholesterol_mg', sa.Float(), nullable=True),
    sa.Column('monounsaturated_g', sa.Float(), nullable=True),
    sa.Column('polyunsaturated_g', sa.Float(), nullable=True),
    sa.Column('saturated_g', sa.Float(), nullable=True),
    sa.Column('trans_fats_g', sa.Float(), nullable=True),
    sa.Column('omega_3_g', sa.Float(), nullable=True),
    sa.Column('omega_6_g', sa.Float(), nullable=True),
    sa.Column('cystine_g', sa.Float(), nullable=True),
    sa.Column('histidine_g', sa.Float(), nullable=True),
    sa.Column('isoleucine_g', sa.Float(), nullable=True),
    sa.Column('leucine_g', sa.Float(), nullable=True),
    sa.Column('lysine_g', sa.Float(), nullable=True),
    sa.Column('methionine_g', sa.Float(), nullable=True),
    sa.Column('phenylalanine_g', sa.Float(), nullable=True),
    sa.Column('protein_g', sa.Float(), nullable=True),
    sa.Column('threonine_g', sa.Float(), nullable=True),
    sa.Column('tryptophan_g', sa.Float(), nullable=True),
    sa.Column('tyrosine_g', sa.Float(), nullable=True),
    sa.Column('valine_g', sa.Float(), nullable=True),
    sa.Column('app_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.id'], ),
    sa.PrimaryKeyConstraint('date', 'app_user_id')
    )
    op.create_table('cronometer_note',
    sa.Column('note', sa.String(), nullable=False),
    sa.Column('app_user_id', sa.Integer(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('day', sa.Date(), nullable=False),
    sa.Column('group', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.id'], ),
    sa.PrimaryKeyConstraint('app_user_id', 'time', 'day', 'group')
    )
    op.create_table('cronometer_serving',
    sa.Column('food_name', sa.String(), nullable=False),
    sa.Column('amount', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('energy_kcal', sa.Float(), nullable=True),
    sa.Column('alcohol_g', sa.Float(), nullable=True),
    sa.Column('caffeine_mg', sa.Float(), nullable=True),
    sa.Column('water_g', sa.Float(), nullable=True),
    sa.Column('b1_thiamine_mg', sa.Float(), nullable=True),
    sa.Column('b2_riboflavin_mg', sa.Float(), nullable=True),
    sa.Column('b3_niacin_mg', sa.Float(), nullable=True),
    sa.Column('b5_pantothenic_acid_mg', sa.Float(), nullable=True),
    sa.Column('b6_pyridoxine_mg', sa.Float(), nullable=True),
    sa.Column('b12_cobalamin_μg', sa.Float(), nullable=True),
    sa.Column('folate_μg', sa.Float(), nullable=True),
    sa.Column('vitamin_a_iu', sa.Float(), nullable=True),
    sa.Column('vitamin_c_mg', sa.Float(), nullable=True),
    sa.Column('vitamin_d_iu', sa.Float(), nullable=True),
    sa.Column('vitamin_e_mg', sa.Float(), nullable=True),
    sa.Column('vitamin_k_μg', sa.Float(), nullable=True),
    sa.Column('calcium_mg', sa.Float(), nullable=True),
    sa.Column('copper_mg', sa.Float(), nullable=True),
    sa.Column('iron_mg', sa.Float(), nullable=True),
    sa.Column('magnesium_mg', sa.Float(), nullable=True),
    sa.Column('manganese_mg', sa.Float(), nullable=True),
    sa.Column('phosphorus_mg', sa.Float(), nullable=True),
    sa.Column('potassium_mg', sa.Float(), nullable=True),
    sa.Column('selenium_μg', sa.Float(), nullable=True),
    sa.Column('sodium_mg', sa.Float(), nullable=True),
    sa.Column('zinc_mg', sa.Float(), nullable=True),
    sa.Column('carbs_g', sa.Float(), nullable=True),
    sa.Column('fiber_g', sa.Float(), nullable=True),
    sa.Column('starch_g', sa.Float(), nullable=True),
    sa.Column('sugars_g', sa.Float(), nullable=True),
    sa.Column('net_carbs_g', sa.Float(), nullable=True),
    sa.Column('fat_g', sa.Float(), nullable=True),
    sa.Column('cholesterol_mg', sa.Float(), nullable=True),
    sa.Column('monounsaturated_g', sa.Float(), nullable=True),
    sa.Column('polyunsaturated_g', sa.Float(), nullable=True),
    sa.Column('saturated_g', sa.Float(), nullable=True),
    sa.Column('trans_fats_g', sa.Float(), nullable=True),
    sa.Column('omega_3_g', sa.Float(), nullable=True),
    sa.Column('omega_6_g', sa.Float(), nullable=True),
    sa.Column('cystine_g', sa.Float(), nullable=True),
    sa.Column('histidine_g', sa.Float(), nullable=True),
    sa.Column('isoleucine_g', sa.Float(), nullable=True),
    sa.Column('leucine_g', sa.Float(), nullable=True),
    sa.Column('lysine_g', sa.Float(), nullable=True),
    sa.Column('methionine_g', sa.Float(), nullable=True),
    sa.Column('phenylalanine_g', sa.Float(), nullable=True),
    sa.Column('protein_g', sa.Float(), nullable=True),
    sa.Column('threonine_g', sa.Float(), nullable=True),
    sa.Column('tryptophan_g', sa.Float(), nullable=True),
    sa.Column('tyrosine_g', sa.Float(), nullable=True),
    sa.Column('valine_g', sa.Float(), nullable=True),
    sa.Column('app_user_id', sa.Integer(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('day', sa.Date(), nullable=False),
    sa.Column('group', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['app_user_id'], ['app_user.id'], ),
    sa.PrimaryKeyConstraint('food_name', 'amount', 'app_user_id', 'time', 'day', 'group')
    )
    op.add_column('cronometer_exercise', sa.Column('day', sa.Date(), nullable=False))
    op.add_column('cronometer_exercise', sa.Column('time', sa.Time(), nullable=False))
    op.drop_column('cronometer_exercise', 'date_time')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cronometer_exercise', sa.Column('date_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('cronometer_exercise', 'time')
    op.drop_column('cronometer_exercise', 'day')
    op.drop_table('cronometer_serving')
    op.drop_table('cronometer_note')
    op.drop_table('cronometer_daily_summary')
    op.drop_table('cronometer_biometric')
    # ### end Alembic commands ###
